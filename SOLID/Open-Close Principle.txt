using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace System_Design.SOLID_
{
    public enum Color 
    { 
        Red, Green, Blue
    }

    public enum Size
    {
        Small, Medium, Large, Yuge
    }

    public class Product
    {
        public string Name;
        public Color Color;
        public Size Size;

        public Product(string name, Color color, Size size)
        {
            if (name == null)
            {
                throw new ArgumentNullException();
            }
            Name = name;
            Color = color;
            Size = size;
        }
    }

    public class ProductFilter
    {
        public IEnumerable<Product> FilterBySize(IEnumerable<Product> products, Size size)
        {
            foreach (var p in products)
            {
                if (p.Size == size)
                    yield return p;
            }
        }

        public IEnumerable<Product> FilterByColor(IEnumerable<Product> products, Color color)
        {
            foreach (var p in products)
            {
                if (p.Color == color)
                    yield return p;
            }
        }

        public IEnumerable<Product> FilterByColorAndSize(IEnumerable<Product> products, Color color, Size size)
        {
            foreach (var p in products)
            {
                if (p.Color == color && p.Size == size)
                    yield return p;
            }
        }
        
    }
    /*
     here in product filter if you want to add more filters, you have to add more methods in the ProductFilter class which breaks the open/close principle
     OCP states that classes should be open to extension, which means it should be possible to extend the product filter. but it should be closed for modification.
     which mean nobody should go back and edit the product filter. the filter might have already been shifted to a customer.
     the answer is ofcourse inheritance.
     */

    /*
     we're going to implement what you might call an enterprise pattern called the specification pattern
    And this is precisely the thing that will allow us to avoid violating the open closed principle.
    instead of having this rigid functionality we're going to make a bunch of interfaces
    the first interface that we're going to make is going to be called specification satisfies some particular criteria.
    So you can think of this specification as a kind of predicate which operates on any type T.
     */

    /*
     So what's happening here is that we allow people to make specifications and 
     we check whether a particular item of type T is actually satisfying some criteria
     */
    public interface ISpecification<T>
    {
        bool IsSatasfied(T t);
    }

    /*
     a filtering mechanism which once again operates on any type T. So we take a bunch of items of type T 
     and lifter according to the specification which is defined here.
    So this is the interface you feeded a bunch of items. You tell it what the specification of those items should 
    be and how to filter them and you get a bunch of filtered items back.


     */
    public interface IFilter<T>
    {
        IEnumerable<T> Filter(IEnumerable<T> items, ISpecification<T> spec);
    }

    //the types here can be virtually anything but we're filtering products.
    public class ColorSpecification : ISpecification<Product>
    {
        private Color Color;
        public ColorSpecification(Color color)
        {
            Color = color;
        }
        public bool IsSatasfied(Product t)
        {
            return t.Color == Color;
        }
    }

    public class SizeSpecification : ISpecification<Product>
    {
        private Size Size;

        public SizeSpecification(Size size)
        {
            Size = size;
        }

        public bool IsSatasfied(Product p)
        {
            return p.Size == Size;
        }
    }

    public class AndSpecification<T> : ISpecification<T>
    {
        ISpecification<T> first, second;

        public AndSpecification(ISpecification<T> first, ISpecification<T> second)
        {
            this.first = first ?? throw new ArgumentNullException(paramName: nameof(first));
            this.second = second ?? throw new ArgumentNullException(paramName: nameof(first));
        }
        public bool IsSatasfied(T t)
        {
            return first.IsSatasfied(t) && second.IsSatasfied(t);
        }
    }

    public class BetterFilter : IFilter<Product>
    {
        // it's going to be a generic one
        public IEnumerable<Product> Filter(IEnumerable<Product> items, ISpecification<Product> spec)
        {
            foreach(var i in items)
            {
                if (spec.IsSatasfied(i))
                    yield return i;
            }
        }
    }
    class OCP
    {
        
        static void Main(string[] args)
        {

            var apple = new Product("apple", Color.Green, Size.Small);
            var tree = new Product("tree", Color.Green, Size.Large);
            var house = new Product("house", Color.Red, Size.Yuge);

            Product[] products = { apple, tree, house };
            var pf = new ProductFilter();
            Console.WriteLine("Green Products: ");
            foreach (var p in pf.FilterByColor(products, Color.Green))
            {
                Console.WriteLine($"- {p.Name} is green.");
            }

            Console.WriteLine("Green Products (New): ");

            var bf = new BetterFilter();
            foreach (var p in bf.Filter(products, new ColorSpecification(Color.Green)))
            {
                Console.WriteLine($"- {p.Name} is green.");
            }

            Console.WriteLine("Red and Large Products (New): ");
            foreach (var p in bf.Filter(products, new AndSpecification<Product> (new ColorSpecification(Color.Red), new SizeSpecification(Size.Yuge)))) {
                Console.WriteLine($"- {p.Name} is Red and Yuge.");
            }

            Console.ReadLine();
        }
        
    }
}
